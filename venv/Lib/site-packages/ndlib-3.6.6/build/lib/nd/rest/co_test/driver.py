# coding=utf-8

"""
A TestRunner for use with the Python unit testing framework.

测试运行器

继承自python单元测试框架

It generates a HTML report to show the result at a glance.

The simplest way to use this is to invoke its main method. E.g.
最简单的用法

    import unittest
    import HTMLTestRunner

    ... define your tests ...

    if __name__ == '__main__':
        HTMLTestRunner.main()


For more customization options, instantiates a HTMLTestRunner object.
更多自定义选项

HTMLTestRunner is a counterpart to unittest's TextTestRunner. E.g.
文本测试运行器的相应封装

    # output to a file
    fp = file('my_report.html', 'wb')
    runner = HTMLTestRunner.HTMLTestRunner(
                stream=fp,
                title='My unit test',
                description='This demonstrates the report output by HTMLTestRunner.'
                )

    # Use an external stylesheet.
    # 使用外部样式
    # See the Template_mixin class for more customizable options
    runner.STYLESHEET_TMPL = '<link rel="stylesheet" href="my_stylesheet.css" type="text/css">'

    # run the test
    runner.run(my_test_suite)

------------------------------------------------------------------------
Copyright (c) 2004-2007, Wai Yip Tung
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

* Redistributions of source code must retain the above copyright notice,
  this list of conditions and the following disclaimer.
* Redistributions in binary form must reproduce the above copyright
  notice, this list of conditions and the following disclaimer in the
  documentation and/or other materials provided with the distribution.
* Neither the name Wai Yip Tung nor the names of its contributors may be
  used to endorse or promote products derived from this software without
  specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS
IS" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A
PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER
OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL,
EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO,
PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR
PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF
LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING
NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS
SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
"""

# URL: http://tungwaiyip.info/software/HTMLTestRunner.html
from ..co_test.co_report import CoReport

__author__ = "Wai Yip Tung"
__version__ = "0.8.2"

"""
Change History

Version 0.8.2
* Show output inline instead of popup window (Viorel Lupu).

Version in 0.8.1
* Validated XHTML (Wolfgang Borgert).
* Added description of test classes and test cases.

Version in 0.8.0
* Define Template_mixin class for customization.
* Workaround a IE 6 bug that it does not treat <script> block as CDATA.

Version in 0.7.1
* Back port to Python 2.3 (Frank Horowitz).
* Fix missing scroll bars in detail log (Podi).
"""

# TODO: color stderr
# TODO: simplify javascript using ,ore than 1 class in the class attribute?

# import lib.log as LogM
# logger = LogM.Logger()

import datetime
import sys
import unittest
import time

from ..co_time.co_time import CoTime
from ..co_file.file import *

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)
logger.info("测试框架驱动")

app_loc = get_app_loc()


TestResult = unittest.TestResult

from ..co_test.result import _TestResult
from ..co_test.report import Report


class HTMLTestRunner(Report):
    """
    """
    def __init__(self, stream=sys.stdout, verbosity=1, title=None, description=None, reporter=CoReport()):
        super(HTMLTestRunner, self).__init__()

        self.stream = stream
        self.verbosity = verbosity

        self.reporter = reporter

        if title is None:
            self.title = self.DEFAULT_TITLE
        else:
            self.title = title

        if description is None:
            self.description = self.DEFAULT_DESCRIPTION
        else:
            self.description = description

        self.startTime = datetime.datetime.now()

        logger.info("起始时间")
        logger.info(self.startTime)

    def run(self, test, contact=None):
        """
        Run the given test case or test suite.
        """
        result = _TestResult(self.verbosity)

        logger.info("开始运行测试用例")
        logger.info(self.verbosity)

        # 运行测试，并保存结果
        test(result)

        self.stopTime = datetime.datetime.now()

        logger.info("运行结束-driver-run")
        logger.info(result)
        logger.info(self.stopTime)
        logger.info(contact)

        self.generateReport(test, result, contact)

        # print >>sys.stderr, '\nTime Elapsed: %s' % (self.stopTime-self.startTime)
        return result


##############################################################################
# Facilities for running tests from the command line
##############################################################################

# Note: Reuse unittest.TestProgram to launch test.
# In the future we may
# build our own launcher to support more specific command line
# parameters like test title, CSS, etc.
# 构建自己的启动器，来支持更多的命令行参数
class TestProgram(unittest.TestProgram):
    """
    继承自TestProgram

    A variation of the unittest.TestProgram.

    Please refer to the util

    class for command line parameters.
    """
    def runTests(self):
        # Pick HTMLTestRunner as the default test runner.
        # util class's testRunner parameter is not useful because it means
        # we have to instantiate HTMLTestRunner before we know self.verbosity.
        if self.testRunner is None:
            print "测试运行神器"
            time_o = CoTime(time.time())
            # d = time_o.get_format_str("%Y-%m-%d-%H-%M")
            d = time_o.get_format_str("%Y-%m-%d")
            fp = open(app_loc + os.sep + "results" + os.sep + d + "-main.html", "wb")
            self.verbosity = 2
            self.testRunner = HTMLTestRunner(verbosity=self.verbosity, stream=fp)

        unittest.TestProgram.runTests(self)

main = TestProgram

##############################################################################
# Executing this module from the command line
##############################################################################
if __name__ == "__main__":
    main(module=None)
